<!DOCTYPE html>
<html>
    <head>
        <title>Titulo</title>
        <style>
            html, body { margin: 0; padding: 0; overflow: hidden; }
            #text {
                position: absolute;
                padding: 10px;
                width: 100%;
                text-align: center;
                color: #FFFFFF;
            }
        </style>
    </head>
    <body>
        <div id="text">Titulo<br/>
            Subtitulo<br/>
            Descripción<br/>
        </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r94/three.min.js"></script>
    <script>

    //variable global lado
    var lado=50;

    //funciones a aplicar

    //funcion de escalado
    function escalado(Sx,Sy,Sz,cubo) {
         var matrizEs = new THREE.Matrix4();
      matrizEs.set(Sx, 0, 0, 0,
                    0, Sy, 0, 0,
                    0, 0, Sz, 0,
                    0, 0, 0, 1);
                    cubo.applyMatrix(matrizEs);
            return cubo;
    }


    //funciones de rotacion sobre el eje x
    function rotacionX (ang,cubo) {
        var matrizRx = new THREE.Matrix4();
            matrizRx.set(1, 0, 0, 0,
                    0, Math.cos(ang), Math.sin(ang), 0,
                    0, Math.sin(ang),-Math.cos(ang) , 0,
                    0, 0, 0, 1);
            cubo.applyMatrix(matrizRx);
            return cubo;
    }


    //funcion de traslacion

    function traslacion(tx, ty,tz,cubo) {
            var matriz = new THREE.Matrix4();
            matriz.set(1, 0, 0, tx,
                    0, 1, 0, ty,
                    0, 0, 1, tz,
                    0, 0, 0, 1);
     cubo.applyMatrix(matriz);
     return cubo;
    }



  // funcion de cubo
  function cubo(posini,lado, color) {
        cuboG = new THREE.Geometry();
        // Proceso de construcciópn del cubo
        const vertices =[posini, [posini[0], posini[1]+lado, posini[2]], [posini[0]+lado, posini[1]+lado, posini[2]], [posini[0]+lado, posini[1], posini[2]], posini,
        [posini[0], posini[1], posini[2]+lado],[posini[0], posini[1]+lado, posini[2]+lado],[posini[0], posini[1]+lado, posini[2]],posini,
        [posini[0]+lado, posini[1], posini[2]],[posini[0]+lado, posini[1], posini[2]+lado],[posini[0]+lado, posini[1]+lado, posini[2]+lado],[posini[0]+lado, posini[1]+lado, posini[2]],
        [posini[0], posini[1]+lado, posini[2]],[posini[0], posini[1]+lado, posini[2]+lado],[posini[0]+lado, posini[1]+lado, posini[2]+lado],[posini[0]+lado, posini[1], posini[2]+lado], [posini[0], posini[1], posini[2]+lado]];

        for (let i = 0; i < vertices.length; ++i) {
            x = vertices[i][0];
            y = vertices[i][1];
            z = vertices[i][2];
            vector = new THREE.Vector3(x, y, z);
            cuboG.vertices.push(vector);
        }

        Material=new THREE.ParticleBasicMaterial(color);
      
        cubox= new THREE.Line(cuboG,Material);

        return cubox;
    }


    function init() {

        // Escena
        scene = new THREE.Scene();
        camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);    
        renderer = new THREE.WebGLRenderer();
        renderer.setClearColor(0x000000, 1.0);
        renderer.setSize(window.innerWidth, window.innerHeight);

        var size = 700;
        var arrowSize = 40;
        var divisions = 20;
        var origin = new THREE.Vector3( 0, 0, 0 );
        var x = new THREE.Vector3( 1, 0, 0 );
        var y = new THREE.Vector3( 0, 1, 0 );
        var z = new THREE.Vector3( 0, 0, 1 );
        var color2 = new THREE.Color( 0x333333 );  /// 0x333333
        var colorR = new THREE.Color( 0xAA0000 );
        var colorG = new THREE.Color( 0x00AA00 );
        var colorB = new THREE.Color( 0x0000AA );

        //Crear la Grilla
        var gridHelperXZ = new THREE.GridHelper( size, divisions, color2, color2);

        //Flechas
        var arrowX = new THREE.ArrowHelper( x, origin, arrowSize, colorR );
        var arrowY = new THREE.ArrowHelper( y, origin, arrowSize, colorG );
        var arrowZ = new THREE.ArrowHelper( z, origin, arrowSize, colorB );
			
        //Cámara
        camera.position.x = 200;
        camera.position.y = 100;
        camera.position.z = 500;
        camera.lookAt(scene.position);

      
       
        // En el documento HTML
        document.body.appendChild(renderer.domElement);
        //CUBO INICIAL
        cubo1=cubo([0,0,0],lado,{color:0xff00ff});

        //CUBO TRANSLADADO
        cubo2=cubo([0,0,0],lado,{color:0x7f69a5});

        matrizT = traslacion(2*lado, 0, 0,cubo2);
        //cubo escalado
        cubo3=cubo([0,0,0],lado,{color:0x00ffff});

        matrizTi = traslacion(-lado/2, -lado/2, -lado/2,cubo3);
        matrizescalado=escalado(1.5, 1.5, 1.5,cubo3);
        matrizTti = traslacion(lado/2, lado/2, lado/2,cubo3);
        matriztt= traslacion(2*lado, 0, 0,cubo3);

        //CUBO ROTADO
        cubo4=cubo([0,0,0],lado,{color:0xae2029});

        matrizTii = traslacion(-lado/2, -lado/2, -lado/2,cubo4);
        matrizescaladoo=escalado(1.5, 1.5, 1.5,cubo4);
        matrizTtii = traslacion(lado/2, lado/2, lado/2,cubo4);
        matrizttt= traslacion(2*lado, 0, 0,cubo4);
        matrizrotadox=rotacionX(45,cubo4);

        // Agregar elementos al escenario
        scene.add(gridHelperXZ);
	    scene.add(arrowX);	
		scene.add(arrowY);	
		scene.add(arrowZ);

        scene.add(cubo1);

        scene.add(cubo2);

        scene.add(cubo3);

        scene.add(cubo4);

        renderer.render(scene, camera);
    }

    init();  // otra forma: window.onload = init;

    </script>
  </body>
</html>