<!DOCTYPE html>
<html>
    <head>
        <title>Titulo</title>
        <style>
            html, body { margin: 0; padding: 0; overflow: hidden; }
            #text {
                position: absolute;
                padding: 10px;
                width: 100%;
                text-align: center;
                color: #FFFFFF;
            }
        </style>
    </head>
    <body>
        <div id="text">Titulo<br/>
            Subtitulo<br/>
            Descripción<br/>
        </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r94/three.min.js"></script>
    <script>

// funciones de traslacion rotacion y escala

function mtrxTraslation(tx, ty,tz) {
            var matriz = new THREE.Matrix4();
            matriz.set(1, 0, 0, tx,
                    0, 1, 0, ty,
                    0, 0, 1, tz,
                    0, 0, 0, 1);
            return matriz;
    }


    function mtrxScale(sx,sy,sz) {
        var matrizEscala = new THREE.Matrix4();
            matrizEscala.set(sx, 0, 0, 0,
                             0,sy, 0, 0,
                             0, 0, sz, 0,
                             0, 0, 0, 1);
            return matrizEscala;
    }


    function mtrxXRotation(angulox) {

        var matrizRotx = new THREE.Matrix4();
             matrizRotx.set(1, 0, 0, 0,
                             0,Math.cos(angulox), -Math.sin(angulox), 0,
                             0, Math.sin(angulox), Math.cos(angulox), 0,
                             0, 0, 0, 1);
            return matrizRotx;

    }

    function mtrxYRotation(anguloy) {

        var matrizRoty = new THREE.Matrix4();
             matrizRoty.set(Math.cos(anguloy), 0, Math.sin(anguloy), 0,
                             0,1, 0, 0,
                             -Math.sin(anguloy), 0, Math.cos(anguloy), 0,
                             0, 0, 0, 1);
            return matrizRoty;
    }

    function mtrxZRotation(anguloz) {

        var matrizRotz = new THREE.Matrix4();
             matrizRotz.set(Math.cos(anguloz), -Math.sin(anguloz), 0, 0,
             Math.sin(anguloz),Math.cos(anguloz),0, 0,
                             0, 0, 0, 0,
                             0, 0, 0, 1);
            return matrizRotz;
    }


// funcion de cuadrado para un origen en especifico
    function squareGeometry(origen, lado, color) {
        cuadrado = new THREE.Geometry();
        const vertices = [origen, [origen[0], origen[1]+lado, origen[2]], [origen[0]+lado, origen[1]+lado, origen[2]], [origen[0]+lado, origen[1], origen[2]], origen];
        for (let i = 0; i < vertices.length; ++i) {
            x = vertices[i][0];
            y = vertices[i][1];
            z = vertices[i][2];
            vector = new THREE.Vector3(x, y, z);
            cuadrado.vertices.push(vector);
        }
        return cuadrado;
    }

    // funcion de cubo

    function cubo(posini,lado, color) {
        cubo = new THREE.Geometry();
        // Proceso de construcciópn del cubo
        const vertices =[posini, [posini[0], posini[1]+lado, posini[2]], [posini[0]+lado, posini[1]+lado, posini[2]], [posini[0]+lado, posini[1], posini[2]], posini,
        [posini[0], posini[1], posini[2]+lado],[posini[0], posini[1]+lado, posini[2]+lado],[posini[0], posini[1]+lado, posini[2]],posini,
        [posini[0]+lado, posini[1], posini[2]],[posini[0]+lado, posini[1], posini[2]+lado],[posini[0]+lado, posini[1]+lado, posini[2]+lado],[posini[0]+lado, posini[1]+lado, posini[2]],
        [posini[0], posini[1]+lado, posini[2]],[posini[0], posini[1]+lado, posini[2]+lado],[posini[0]+lado, posini[1]+lado, posini[2]+lado],[posini[0]+lado, posini[1], posini[2]+lado], [posini[0], posini[1], posini[2]+lado]];

        for (let i = 0; i < vertices.length; ++i) {
            x = vertices[i][0];
            y = vertices[i][1];
            z = vertices[i][2];
            vector = new THREE.Vector3(x, y, z);
            cubo.vertices.push(vector);
        }

        return cubo;
   
    }

    // cubo transladado

    function cubetransale(posini,lado, color) {
        cuboTr = new THREE.Geometry();
        // Proceso de construcciópn del cubo
        const vertices =[posini, [posini[0], posini[1]+lado, posini[2]], [posini[0]+lado, posini[1]+lado, posini[2]], [posini[0]+lado, posini[1], posini[2]], posini,
        [posini[0], posini[1], posini[2]+lado],[posini[0], posini[1]+lado, posini[2]+lado],[posini[0], posini[1]+lado, posini[2]],posini,
        [posini[0]+lado, posini[1], posini[2]],[posini[0]+lado, posini[1], posini[2]+lado],[posini[0]+lado, posini[1]+lado, posini[2]+lado],[posini[0]+lado, posini[1]+lado, posini[2]],
        [posini[0], posini[1]+lado, posini[2]],[posini[0], posini[1]+lado, posini[2]+lado],[posini[0]+lado, posini[1]+lado, posini[2]+lado],[posini[0]+lado, posini[1], posini[2]+lado], [posini[0], posini[1], posini[2]+lado]];

        for (let i = 0; i < vertices.length; ++i) {
            x = vertices[i][0];
            y = vertices[i][1];
            z = vertices[i][2];
            vector = new THREE.Vector3(x, y, z);
            cuboTr.vertices.push(vector);
        }

        matrizT = mtrxTraslation(2*lado, 0, 0);
        cuboTr.applyMatrix(matrizT);

        return cuboTr;
   
    }

    //cubo escalado
    function cuboescalado(posini,lado, color) {
        cuboes = new THREE.Geometry();
        // Proceso de construcciópn del cubo
        const vertices =[posini, [posini[0], posini[1]+lado, posini[2]], [posini[0]+lado, posini[1]+lado, posini[2]], [posini[0]+lado, posini[1], posini[2]], posini,
        [posini[0], posini[1], posini[2]+lado],[posini[0], posini[1]+lado, posini[2]+lado],[posini[0], posini[1]+lado, posini[2]],posini,
        [posini[0]+lado, posini[1], posini[2]],[posini[0]+lado, posini[1], posini[2]+lado],[posini[0]+lado, posini[1]+lado, posini[2]+lado],[posini[0]+lado, posini[1]+lado, posini[2]],
        [posini[0], posini[1]+lado, posini[2]],[posini[0], posini[1]+lado, posini[2]+lado],[posini[0]+lado, posini[1]+lado, posini[2]+lado],[posini[0]+lado, posini[1], posini[2]+lado], [posini[0], posini[1], posini[2]+lado]];

        for (let i = 0; i < vertices.length; ++i) {
            x = vertices[i][0];
            y = vertices[i][1];
            z = vertices[i][2];
            vector = new THREE.Vector3(x, y, z);
            cuboes.vertices.push(vector);
        }
        
        escalado=mtrxScale(1.5,1.5,1.5)
        cuboes.applyMatrix(escalado);

        trans = mtrxTraslation(2*lado, 0, 0);
        cuboes.applyMatrix(trans);


        return cuboes;
   
    }


    function init() {

        // Escena
        scene = new THREE.Scene();
        camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);    
        renderer = new THREE.WebGLRenderer();
        renderer.setClearColor(0x000000, 1.0);
        renderer.setSize(window.innerWidth, window.innerHeight);

        var size = 700;
        var arrowSize = 40;
        var divisions = 20;
        var origin = new THREE.Vector3( 0, 0, 0 );
        var x = new THREE.Vector3( 1, 0, 0 );
        var y = new THREE.Vector3( 0, 1, 0 );
        var z = new THREE.Vector3( 0, 0, 1 );
        var color2 = new THREE.Color( 0x333333 );  /// 0x333333
        var colorR = new THREE.Color( 0xAA0000 );
        var colorG = new THREE.Color( 0x00AA00 );
        var colorB = new THREE.Color( 0x0000AA );

        //Crear la Grilla
        var gridHelperXZ = new THREE.GridHelper( size, divisions, color2, color2);

        //Flechas
        var arrowX = new THREE.ArrowHelper( x, origin, arrowSize, colorR );
        var arrowY = new THREE.ArrowHelper( y, origin, arrowSize, colorG );
        var arrowZ = new THREE.ArrowHelper( z, origin, arrowSize, colorB );
			
        //Cámara
        camera.position.x = 000;
        camera.position.y = 100;
        camera.position.z = 400;
        camera.lookAt(scene.position);

      
        //Geometria = squareGeometry([0, 0, 0], 30, 0xffff00)
        //Geometria3 = squareGeometry([1, 1, 1], 50, 0xfff8e7)
        cubo1=cubo([1,1,1],40,0xbc8f8f);
        cubo2=cubetransale([1,1,1],40,0xbbfc8f);
        cubo3=cuboescalado([1,1,1],40,0xbbfc8f);
       

        // Colores
        //Material=new THREE.ParticleBasicMaterial({color:0xffff00});
        //Material2=new THREE.ParticleBasicMaterial({color:0xfff8e7});
        Material3=new THREE.ParticleBasicMaterial({color:0xbc8f8f});
        Material4=new THREE.ParticleBasicMaterial({color:0xbb8cfb});
        Material5=new THREE.ParticleBasicMaterial({color:0xbfcbf8});
        //Cuadrado = new THREE.Line(Geometria,Material);
        //Cuadrado2 = new THREE.Line(Geometria,Material2); 
        //Cuadrado3 = new THREE.Line(Geometria3,Material2); 
        cubol=new THREE.Line(cubo1,Material3);
        cuboo=new THREE.Line(cubo2,Material4);
        cuboos=new THREE.Line(cubo3,Material5);
        
        // aplicacion de funciones

        
        //aplicacion matriz de traslacion
        
        //matrizT = mtrxTraslation(0, 0, 1);
        //aplicacion matriz de escala
        //matrizEs = mtrxScale(2, 3, 1);
        //aplicacion matriz de rotacion
        //matrizRottx= mtrxXRotation(45);
        //matrizRotty= mtrxYRotation(45);
        //matrizRottz= mtrxZRotation(45);
        //aplicacion de los procesos anteriores
        
        //Cuadrado2.applyMatrix(matrizT);

        //Cuadrado2.applyMatrix(matrizEs);
        
        //Cuadrado2.applyMatrix(matrizRottx); 
        //Cuadrado2.applyMatrix(matrizRotty); 
        //Cuadrado2.applyMatrix(matrizRottz);
    

      

        // En el documento HTML
        document.body.appendChild(renderer.domElement);

        // Agregar elementos al escenario
        scene.add(gridHelperXZ);
	    scene.add(arrowX);	
		scene.add(arrowY);	
		scene.add(arrowZ);
        //scene.add(Cuadrado);
        //scene.add(Cuadrado2);
        //scene.add(Cuadrado3);
        scene.add(cubol);
        scene.add(cuboo);
        scene.add(cuboos);

        renderer.render(scene, camera);
    }

    init();  // otra forma: window.onload = init;

    </script>
  </body>
</html>